name: ci-main

on:
  push:
    branches:
      - main

jobs:
  init:
    name: üßê Inintialize
    runs-on: ubuntu-24.04-arm
    outputs:
      skip_ci: ${{ steps.check_flag.outputs.skip_ci }}
      image_version: ${{ steps.check_tag.outputs.image_version }}
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for --no-ci flag in commit message
        id: check_flag
        run: |
          echo "Checking commit message for --no-ci flag..."
          if echo "${{ github.event.head_commit.message }}" | grep -- '--no-ci'; then
            echo "Skipping CI"
            echo "skip_ci=true" >> $GITHUB_OUTPUT
          else
            echo "skip_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Check release tag
        id: check_tag
        run: |
          VERSION=$(cat requirements.txt | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          echo "image_version=v${VERSION}" >> $GITHUB_OUTPUT
      
          export TAG_NAME="v${VERSION}"
          if ! [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Tag $TAG_NAME does not meet the required format 'vX.Y.Z'."
            exit 1
          fi

          git fetch --unshallow --tags
          export TAG_EXISTS=$(git tag --list $TAG_NAME)
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $TAG_NAME already exists."
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: üèóÔ∏è Build
    needs: init
    if: ${{ needs.init.outputs.skip_ci == 'false' && needs.init.outputs.tag_exists == 'false' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build/Publish as GitHub Package
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.init.outputs.image_version }}

      - name: Check tag and push in Github
        run: |
          # Set Git identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if the tag already exists
          TAG_EXISTS=$(git tag --list ${{ needs.init.outputs.image_version }})
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag ${{ needs.init.outputs.image_version }} already exists."
            exit 1
          fi

      - name: Test image
        run: |
          docker run -i ghcr.io/${{ github.repository }}:${{ needs.init.outputs.image_version }}

  release:
    name: üöÄ Release
    needs: [ init, build ]
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Set version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          tag_prefix: ""
          custom_tag: ${{ needs.init.outputs.image_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.init.outputs.image_version }}
          name: "Ansible ${{ needs.init.outputs.image_version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.tag_version.outputs.changelog }}
